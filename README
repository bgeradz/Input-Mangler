==INSTALLATION==

To compile you will need the spidermonkey library and development files.
And you will need to update the Makefile and possibly the run.sh script.

Finding spidermonkey may be a bit complicated.
On ubuntu at least before the Carmic Koala release the packages you needed was:

libmozjs-dev

As per this moment (2010-03-17)
Utuntu does not want to install this package without blood,
but thanks to the hint from folks at mediatomb.org project, you can install

xulrunner-dev

package on Carmik. It will provide spidermonkey, however under somewhat obscure paths.
You need to set the compiler/linker variables at the top of Makefile accordingly, and you may need to set
the correct LD_LIBRARY_PATH in the run.sh script

On other distributions, try to look for a package like 'smjs'.

In any case, kbd-mangler looks for jsapi.h file, whereever it is.

Once you have found the spidermonkey, simply run make.

Adapt the run.sh script.

== The rescue key sequence ==

THIS IS VERY IMPORTANT!!!!!!!!!!!
It may easily happen that you make your system inaccessible by running a mangler script!
There is a key combination that will save you from hard reset
(or logging in from another computer and killing kbd-mangler)
That is:
RIGHT SHIFT + RIGHT CTRL
This combination is handeled specially by kbd-mangler independent of any javascript.
Kbd mangler simply exits upon receiving it, and you get your keyboard back :-)
PLEASE memorize this sequence, you are LIKELY to need it especially in you early experiments!!!



== Running kbd mangler ==
You must run kbd-mangler as root or someone having access to /dev/input* devices

kbd-mangler <input device> <uinput device> <main script>

A Better way is to adapt the run.sh script and start kbd-mangler with:

./run.sh <main script>

Example:

sudo ./run.sh js/examples/trivial.js



=========== JavaScropt API ==========

------ function process(event)

This is the entry point function, The system will try to find it after parsing your scripts and will
pass all events to it. Thus you must implement this function in your script.
Event parameter will contain a js object with following props:
type: event type, you probably want to react only to events of type EV_KEY (see keysyms.js)
code: in case of key event contains the key code (see KEY_* constants in keysyms.js)
value: in case of key event: 1- press, 0-release, 2-repeat

IMPORTANT NOTE:
This function must eventually emit (see emit function) some events back to the system otherwise your system
completely stops responding to keyboard!!!
Normally you want to emit back almost all events you receive with an exception of some keys you wish to process in a different way.

NOTE: event.type may also be EV_TIMER
This is a special event NOT generated by system, but by the kbd_mangler program in regular intervals.
If you are not interested in this type of event, simply ignore it and there is no need to emit it.
If you wonder what is this event good for - take a look at js/examples/aux_mouse.js


== Native functions ==

------ function emit(type, code, value)

Function emits an en event into the system.
Parameters have the same meaning as event object properties in the process function.
The trivial mangler script that does not mangle anything would look like this:

function process(ev) {
	emit(ev.type, ev.key, ev.value);
}

------ function log(string)
Writes a message to standard output with trailing "\n" appended automatically.
Useful for debugging purposes.


------ function time()
Returns current time in milliseconds since some point. Do not rely on this point to be unix epoch, etc, 
the function should be only used to compare elapsed time between various events, etc.
NOTE: You can also use standard javascript way:
new Date().getTime()

------ function include(path)
includes (and evaluates) the given javascript file. If a relative path is given (not starting with /)
it is relative to the current working directory at the time when kbd mangler was started.

------ function exec(command)
Executes the given command using "sh -c command" and fork/execvp
Returns the exit code of the command.


== Useful stuff ==
include('js/keysyms.js');
include('js/keynames.js');

By including these at the top of your scripts you get some usefull constants and the sym() function, giving you the key name for the given code.
These ones are pure javascript, there's no native magic in there.
You can off course implement your own functions or even classes, etc in javascript, put them in separate files, include and use them.

Once you get the idea, the possibilities are limited only by imagination.




